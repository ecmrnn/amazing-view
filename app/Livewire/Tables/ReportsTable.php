<?php

namespace App\Livewire\Tables;

use App\Models\Report;
use Illuminate\Contracts\View\View;
use Illuminate\Support\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Blade;
use PowerComponents\LivewirePowerGrid\Button;
use PowerComponents\LivewirePowerGrid\Column;
use PowerComponents\LivewirePowerGrid\Exportable;
use PowerComponents\LivewirePowerGrid\Facades\Filter;
use PowerComponents\LivewirePowerGrid\Footer;
use PowerComponents\LivewirePowerGrid\Header;
use PowerComponents\LivewirePowerGrid\PowerGrid;
use PowerComponents\LivewirePowerGrid\PowerGridFields;
use PowerComponents\LivewirePowerGrid\PowerGridComponent;
use PowerComponents\LivewirePowerGrid\Traits\WithExport;

final class ReportsTable extends PowerGridComponent
{
    use WithExport;

    public string $tableName = 'ReportsTable';

    public function noDataLabel(): string|View
    { 
        return view('components.table-no-data.reports');
    }

    public function setUp(): array
    {
        $this->showCheckBox();

        return [
            // Exportable::make('export')
            //     ->striped()
            //     ->type(Exportable::TYPE_XLS, Exportable::TYPE_CSV),
            Header::make()
                ->showToggleColumns()
                ->showSearchInput(),
            Footer::make()
                ->showPerPage(),
        ];
    }

    public function boot(): void
    {
        config(['livewire-powergrid.filter' => 'outside']);
    }

    public function datasource(): Builder
    {
        return Report::query()->with('user');
    }

    public function relationSearch(): array
    {
        return [];
    }

    public function fields(): PowerGridFields
    {
        return PowerGrid::fields()
            ->add('id')
            ->add('rid')
            ->add('name_formatted', function ($report) {
                return '<span class="capitalize">' . $report->name . '</span>';
            })
            
            ->add('type', fn($report) => e(ucwords($report->type)))
            ->add('description')
            ->add('description_formatted', function ($report) {
                return Blade::render(
                    '<x-tooltip :textWrap="false" text="' . html_entity_decode($report->description, ENT_QUOTES, 'UTF-8')  . '" dir="top">
                        <div x-ref="content" class="max-w-[250px] line-clamp-1">' . html_entity_decode($report->description) . '</div>
                    </x-tooltip>'
                );
            })
            ->add('user_id')
            ->add('user_id_formatted', function ($report) {
                return '<span class="capitalize">' . $report->user->name() . '</span>';
            })
            ->add('note')
            ->add('note_formatted', function ($report) {
                return Blade::render(
                    '<x-tooltip :textWrap="false" text="' . html_entity_decode($report->note, ENT_QUOTES, 'UTF-8')  . '" dir="top">
                        <div x-ref="content" class="max-w-[250px] line-clamp-1">' . html_entity_decode($report->note) . '</div>
                    </x-tooltip>'
                );
            })
            ->add('created_at_formatted', function ($report) {
                return Carbon::parse($report->created_at)->format('F j, Y');
            })
            ->add('format_formatted', function ($report) {
                if ($report->format == 'pdf') {
                    return "<span class='px-2 py-1 text-xs font-semibold text-white border border-red-500 rounded bg-red-500/75'>PDF</span>";
                } else {
                    return "<span class='px-2 py-1 text-xs font-semibold text-white border border-green-500 rounded bg-green-500/75'>CSV</span>";
                }
                
            });
    }

    public function columns(): array
    {
        return [
            Column::make('Report ID', 'rid')
                ->sortable()
                ->searchable(),

            Column::make('File Name', 'name_formatted', 'name')
                ->sortable()
                ->searchable(),

            Column::make('Type', 'type')
                ->sortable(),

            Column::make('Generated By', 'user_id_formatted', 'user_id')
                ->sortable(),

            Column::make('Date Generated', 'created_at_formatted', 'created_at')
                ->sortable(),

            Column::make('Format', 'format_formatted', 'format')
                ->sortable(),

            Column::action('')
        ];
    }

    public function filters(): array
    {
        return [
        ];
    }

    public function actionsFromView($row)
    {
        return view('components.table-actions.report', [
            'row' => $row,
            'edit_link' => 'app.reports.edit',
            'view_link' => 'app.reports.show',
        ]);
    }

    /*
    public function actionRules($row): array
    {
       return [
            // Hide button edit for ID 1
            Rule::button('edit')
                ->when(fn($row) => $row->id === 1)
                ->hide(),
        ];
    }
    */
}
